buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
    }
}

plugins {
    id 'org.sonarqube' version '2.6.1'
}

apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'signing'

group 'de.toberkoe'
version '0.3'

sourceCompatibility = 10.0
targetCompatibility = 10.0

repositories {
    mavenCentral()
}

configurations.all {
    exclude group: 'javax.transaction', module: 'javax.transaction-api'
}

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    implementation 'org.junit.jupiter:junit-jupiter-params:5.1.0'
    implementation 'org.mockito:mockito-core:2.15.0'
    implementation 'log4j:log4j:1.2.17'
    implementation 'org.hsqldb:hsqldb:2.4.0'
    implementation 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
    implementation 'org.hibernate:hibernate-core:5.2.13.Final'
    implementation 'org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:2.0.0.Alpha1'
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation 'javax.ejb:javax.ejb-api:3.2'
    implementation 'javax.inject:javax.inject:1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    testImplementation 'de.toberkoe:fluent-assertions:0.3'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    testRuntime 'org.junit.platform:junit-platform-launcher:1.1.0'
    testRuntime 'org.junit.platform:junit-platform-runner:1.1.0'
}

junitPlatform.enableStandardTestTask = true

afterEvaluate {
    def junitPlatformTestTask = (JavaExec) project.tasks.getByName('junitPlatformTest')

    compileJava {
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
            ]
            classpath = files()
        }
    }
}

javadoc {
    doFirst {
        options.addStringOption('-module-path', classpath.asPath)
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

allprojects {
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUser, password: ossrhPassword)
                }
                pom.project {
                    name project.name
                    description project.description
                    packaging 'jar'
                    url 'https://github.com/toberkoe/pluto'

                    scm {
                        connection 'scm:git:https://github.com/toberkoe/pluto.git'
                        developerConnection 'scm:git:github.com/toberkoe/pluto.git'
                        url 'https://github.com/toberkoe/pluto.git'
                    }

                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'tbk'
                            name = 'Tobias Bertram-KÃ¶hler'
                            email = 't.bertramkoehler@mail.com'
                        }
                    }
                }
            }
        }
    }

    nexusStaging {
        username = ossrhUser
        password = ossrhPassword
    }
}

